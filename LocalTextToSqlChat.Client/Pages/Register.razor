@page "/register"
@using LocalTextToSqlChat.Client.Models
@using LocalTextToSqlChat.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Register</PageTitle>

<div class="register-container">
    <div class="register-card">
        <h2>Register</h2>
        
        <EditForm Model="@registerRequest" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="form-group">
                <label for="username">Username:</label>
                <InputText id="username" @bind-Value="registerRequest.Username" class="form-control" />
                <ValidationMessage For="() => registerRequest.Username" />
            </div>
            
            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" type="email" @bind-Value="registerRequest.Email" class="form-control" />
                <ValidationMessage For="() => registerRequest.Email" />
            </div>
            
            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" @bind-Value="registerRequest.Password" class="form-control" />
                <ValidationMessage For="() => registerRequest.Password" />
                <small class="form-text">Password must be at least 6 characters long.</small>
            </div>
            
            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Creating account...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </EditForm>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
        
        <div class="login-link">
            <p>Already have an account? <a href="/login">Login here</a></p>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var success = await AuthService.RegisterAsync(registerRequest);
            if (success)
            {
                ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication();
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration failed. Username may already be taken.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        padding: 20px;
    }

    .register-card {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .btn {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 0.75rem;
        border-radius: 4px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .login-link {
        text-align: center;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.25rem;
        display: block;
    }

    h2 {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #333;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }
</style>