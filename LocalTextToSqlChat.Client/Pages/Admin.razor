@page "/admin"
@using LocalTextToSqlChat.Client.Models
@using LocalTextToSqlChat.Client.Services
@inject AdminService AdminService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Admin Panel - User Management</PageTitle>

<div class="container">
    <div class="admin-header">
        <h1 class="mb-4">
            <i class="bi bi-shield-check"></i> Admin Panel
        </h1>
        <button class="btn btn-outline-primary" @onclick="NavigateToChat">
            <i class="bi bi-chat-dots"></i> Back to Chat
        </button>
    </div>
    
    @if (!isAuthorized)
    {
        <div class="alert alert-danger">
            <h4>Access Denied</h4>
            <p>You don't have permission to access this page. Admin privileges required.</p>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading users...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">User Management</h3>
                    </div>
                    <div class="card-body">
                        @if (users != null && users.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Username</th>
                                            <th>Email</th>
                                            <th>Admin Status</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in users)
                                        {
                                            <tr>
                                                <td>@user.Id</td>
                                                <td>@user.Username</td>
                                                <td>@user.Email</td>
                                                <td>
                                                    <span class="badge @(user.IsAdmin ? "bg-success" : "bg-secondary")">
                                                        @(user.IsAdmin ? "Admin" : "User")
                                                    </span>
                                                </td>
                                                <td>@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    <div class="btn-group admin-actions" role="group">
                                                        <button type="button" 
                                                                class="btn btn-sm btn-outline-primary admin-btn" 
                                                                @onclick="() => EditUser(user)">
                                                            <i class="bi bi-pencil"></i> Edit
                                                        </button>
                                                        <button type="button" 
                                                                class="btn btn-sm admin-btn @(user.IsAdmin ? "btn-outline-warning" : "btn-outline-success")" 
                                                                @onclick="() => ToggleAdmin(user.Id)"
                                                                disabled="@isProcessing">
                                                            <i class="bi @(user.IsAdmin ? "bi-shield-slash" : "bi-shield-check")"></i>
                                                            @(user.IsAdmin ? "Remove Admin" : "Make Admin")
                                                        </button>
                                                        <button type="button" 
                                                                class="btn btn-sm btn-outline-danger admin-btn" 
                                                                @onclick="() => DeleteUser(user.Id, user.Username)"
                                                                disabled="@isProcessing">
                                                            <i class="bi bi-trash"></i> Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center">
                                <p>No users found.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (editingUser != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User - @editingUser.Username</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editUserRequest" OnValidSubmit="SaveUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="editUserRequest.Username" class="form-control" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="editUserRequest.Email" class="form-control" type="email" />
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="editUserRequest.IsAdmin" class="form-check-input" id="adminCheck" />
                                <label class="form-check-label" for="adminCheck">
                                    Admin User
                                </label>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool isAuthorized = false;
    private UserDto? editingUser;
    private UpdateUserRequest editUserRequest = new();
    
    protected override async Task OnInitializedAsync()
    {
        isAuthorized = await AuthService.IsAdminAsync();
        
        if (!isAuthorized)
        {
            isLoading = false;
            return;
        }
        
        await LoadUsers();
    }
    
    private async Task LoadUsers()
    {
        isLoading = true;
        users = await AdminService.GetAllUsersAsync();
        isLoading = false;
        StateHasChanged();
    }
    
    private void EditUser(UserDto user)
    {
        editingUser = user;
        editUserRequest = new UpdateUserRequest
        {
            Username = user.Username,
            Email = user.Email,
            IsAdmin = user.IsAdmin
        };
    }
    
    private void CloseEditModal()
    {
        editingUser = null;
        editUserRequest = new();
    }
    
    private async Task SaveUser()
    {
        if (editingUser == null) return;
        
        isProcessing = true;
        var success = await AdminService.UpdateUserAsync(editingUser.Id, editUserRequest);
        
        if (success)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User updated successfully!");
            CloseEditModal();
            await LoadUsers();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to update user.");
        }
        
        isProcessing = false;
    }
    
    private async Task ToggleAdmin(int userId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to change this user's admin status?");
        if (!confirmed) return;
        
        isProcessing = true;
        var success = await AdminService.ToggleUserAdminAsync(userId);
        
        if (success)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Admin status updated successfully!");
            await LoadUsers();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to update admin status.");
        }
        
        isProcessing = false;
    }
    
    private async Task DeleteUser(int userId, string username)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{username}'? This action cannot be undone.");
        if (!confirmed) return;
        
        isProcessing = true;
        var success = await AdminService.DeleteUserAsync(userId);
        
        if (success)
        {
            await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
            await LoadUsers();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to delete user.");
        }
        
        isProcessing = false;
    }
    
    private void NavigateToChat()
    {
        Navigation.NavigateTo("/");
    }
}

<style>
    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #dee2e6;
    }
    
    .admin-header h1 {
        margin-bottom: 0;
    }

    .admin-actions .admin-btn {
        min-width: 120px;
        white-space: nowrap;
    }
    
    .admin-actions {
        display: flex;
        gap: 0.25rem;
    }
    
    .admin-actions .admin-btn {
        flex: 1;
        text-align: center;
    }
</style>